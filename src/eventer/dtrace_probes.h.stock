/*
 * Generated by dtrace(1M).
 */

#ifndef	_DTRACE_PROBES_H
#define	_DTRACE_PROBES_H

#include <unistd.h>

#ifdef	__cplusplus
extern "C" {
#endif

#define EVENTER_STABILITY "___dtrace_stability$eventer$v1$1_1_0_1_1_0_1_1_0_1_1_0_1_1_0"

#define EVENTER_TYPEDEFS "___dtrace_typedefs$eventer$v2"

#if !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED

#define	EVENTER_CALLBACK_ENTRY(arg0, arg1, arg2, arg3, arg4) \
do { \
	__asm__ volatile(".reference " EVENTER_TYPEDEFS); \
	__dtrace_probe$eventer$callback__entry$v1$766f6964202a$63686172202a$696e74$696e74$696e74(arg0, arg1, arg2, arg3, arg4); \
	__asm__ volatile(".reference " EVENTER_STABILITY); \
} while (0)
#define	EVENTER_CALLBACK_ENTRY_ENABLED() \
	({ int _r = __dtrace_isenabled$eventer$callback__entry$v1(); \
		__asm__ volatile(""); \
		_r; })
#define	EVENTER_CALLBACK_RETURN(arg0, arg1, arg2) \
do { \
	__asm__ volatile(".reference " EVENTER_TYPEDEFS); \
	__dtrace_probe$eventer$callback__return$v1$766f6964202a$63686172202a$696e74(arg0, arg1, arg2); \
	__asm__ volatile(".reference " EVENTER_STABILITY); \
} while (0)
#define	EVENTER_CALLBACK_RETURN_ENABLED() \
	({ int _r = __dtrace_isenabled$eventer$callback__return$v1(); \
		__asm__ volatile(""); \
		_r; })


extern void __dtrace_probe$eventer$callback__entry$v1$766f6964202a$63686172202a$696e74$696e74$696e74(const void *, const char *, int, int, int);
extern int __dtrace_isenabled$eventer$callback__entry$v1(void);
extern void __dtrace_probe$eventer$callback__return$v1$766f6964202a$63686172202a$696e74(const void *, const char *, int);
extern int __dtrace_isenabled$eventer$callback__return$v1(void);

#else

#define	EVENTER_CALLBACK_ENTRY(arg0, arg1, arg2, arg3, arg4) \
do { \
	} while (0)
#define	EVENTER_CALLBACK_ENTRY_ENABLED() (0)
#define	EVENTER_CALLBACK_RETURN(arg0, arg1, arg2) \
do { \
	} while (0)
#define	EVENTER_CALLBACK_RETURN_ENABLED() (0)

#endif /* !defined(DTRACE_PROBES_DISABLED) || !DTRACE_PROBES_DISABLED */


#ifdef	__cplusplus
}
#endif

#endif	/* _DTRACE_PROBES_H */
